//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BeamWindow.BlueBeamService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tan", Namespace="http://schemas.datacontract.org/2004/07/BlueService.Service")]
    [System.SerializableAttribute()]
    public partial class Tan : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BatchIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CANField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CurrentWorkflowUserRoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentReviwedUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IsDuplicateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsQCCompletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IssueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JournalNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JournalYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastAccessedBy_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastAccessedTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocalDocumentPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumsCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OCRStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RxnCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TanCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TanStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TanTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TotalDocumentsPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WorkflowIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tanNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BatchId {
            get {
                return this.BatchIdField;
            }
            set {
                if ((this.BatchIdField.Equals(value) != true)) {
                    this.BatchIdField = value;
                    this.RaisePropertyChanged("BatchId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CAN {
            get {
                return this.CANField;
            }
            set {
                if ((object.ReferenceEquals(this.CANField, value) != true)) {
                    this.CANField = value;
                    this.RaisePropertyChanged("CAN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CurrentWorkflowUserRoleId {
            get {
                return this.CurrentWorkflowUserRoleIdField;
            }
            set {
                if ((this.CurrentWorkflowUserRoleIdField.Equals(value) != true)) {
                    this.CurrentWorkflowUserRoleIdField = value;
                    this.RaisePropertyChanged("CurrentWorkflowUserRoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentPath {
            get {
                return this.DocumentPathField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentPathField, value) != true)) {
                    this.DocumentPathField = value;
                    this.RaisePropertyChanged("DocumentPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentReviwedUser {
            get {
                return this.DocumentReviwedUserField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentReviwedUserField, value) != true)) {
                    this.DocumentReviwedUserField = value;
                    this.RaisePropertyChanged("DocumentReviwedUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IsDuplicate {
            get {
                return this.IsDuplicateField;
            }
            set {
                if ((object.ReferenceEquals(this.IsDuplicateField, value) != true)) {
                    this.IsDuplicateField = value;
                    this.RaisePropertyChanged("IsDuplicate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsQCCompleted {
            get {
                return this.IsQCCompletedField;
            }
            set {
                if ((this.IsQCCompletedField.Equals(value) != true)) {
                    this.IsQCCompletedField = value;
                    this.RaisePropertyChanged("IsQCCompleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Issue {
            get {
                return this.IssueField;
            }
            set {
                if ((object.ReferenceEquals(this.IssueField, value) != true)) {
                    this.IssueField = value;
                    this.RaisePropertyChanged("Issue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JournalName {
            get {
                return this.JournalNameField;
            }
            set {
                if ((object.ReferenceEquals(this.JournalNameField, value) != true)) {
                    this.JournalNameField = value;
                    this.RaisePropertyChanged("JournalName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JournalYear {
            get {
                return this.JournalYearField;
            }
            set {
                if ((object.ReferenceEquals(this.JournalYearField, value) != true)) {
                    this.JournalYearField = value;
                    this.RaisePropertyChanged("JournalYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastAccessedBy_Id {
            get {
                return this.LastAccessedBy_IdField;
            }
            set {
                if ((object.ReferenceEquals(this.LastAccessedBy_IdField, value) != true)) {
                    this.LastAccessedBy_IdField = value;
                    this.RaisePropertyChanged("LastAccessedBy_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastAccessedTime {
            get {
                return this.LastAccessedTimeField;
            }
            set {
                if ((this.LastAccessedTimeField.Equals(value) != true)) {
                    this.LastAccessedTimeField = value;
                    this.RaisePropertyChanged("LastAccessedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocalDocumentPath {
            get {
                return this.LocalDocumentPathField;
            }
            set {
                if ((object.ReferenceEquals(this.LocalDocumentPathField, value) != true)) {
                    this.LocalDocumentPathField = value;
                    this.RaisePropertyChanged("LocalDocumentPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumsCount {
            get {
                return this.NumsCountField;
            }
            set {
                if ((this.NumsCountField.Equals(value) != true)) {
                    this.NumsCountField = value;
                    this.RaisePropertyChanged("NumsCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OCRStatus {
            get {
                return this.OCRStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.OCRStatusField, value) != true)) {
                    this.OCRStatusField = value;
                    this.RaisePropertyChanged("OCRStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RxnCount {
            get {
                return this.RxnCountField;
            }
            set {
                if ((this.RxnCountField.Equals(value) != true)) {
                    this.RxnCountField = value;
                    this.RaisePropertyChanged("RxnCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TanCategory {
            get {
                return this.TanCategoryField;
            }
            set {
                if ((this.TanCategoryField.Equals(value) != true)) {
                    this.TanCategoryField = value;
                    this.RaisePropertyChanged("TanCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TanState {
            get {
                return this.TanStateField;
            }
            set {
                if ((this.TanStateField.Equals(value) != true)) {
                    this.TanStateField = value;
                    this.RaisePropertyChanged("TanState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TanType {
            get {
                return this.TanTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TanTypeField, value) != true)) {
                    this.TanTypeField = value;
                    this.RaisePropertyChanged("TanType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TotalDocumentsPath {
            get {
                return this.TotalDocumentsPathField;
            }
            set {
                if ((object.ReferenceEquals(this.TotalDocumentsPathField, value) != true)) {
                    this.TotalDocumentsPathField = value;
                    this.RaisePropertyChanged("TotalDocumentsPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WorkflowId {
            get {
                return this.WorkflowIdField;
            }
            set {
                if ((this.WorkflowIdField.Equals(value) != true)) {
                    this.WorkflowIdField = value;
                    this.RaisePropertyChanged("WorkflowId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string tanNumber {
            get {
                return this.tanNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.tanNumberField, value) != true)) {
                    this.tanNumberField = value;
                    this.RaisePropertyChanged("tanNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BlueBeamService.IBlueData")]
    public interface IBlueData {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlueData/ServiceTest", ReplyAction="http://tempuri.org/IBlueData/ServiceTestResponse")]
        string ServiceTest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlueData/ServiceTest", ReplyAction="http://tempuri.org/IBlueData/ServiceTestResponse")]
        System.Threading.Tasks.Task<string> ServiceTestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlueData/GetAllFilePaths", ReplyAction="http://tempuri.org/IBlueData/GetAllFilePathsResponse")]
        BeamWindow.BlueBeamService.Tan GetAllFilePaths();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlueData/GetAllFilePaths", ReplyAction="http://tempuri.org/IBlueData/GetAllFilePathsResponse")]
        System.Threading.Tasks.Task<BeamWindow.BlueBeamService.Tan> GetAllFilePathsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlueData/UpdateFileModel", ReplyAction="http://tempuri.org/IBlueData/UpdateFileModelResponse")]
        void UpdateFileModel(BeamWindow.BlueBeamService.Tan tan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlueData/UpdateFileModel", ReplyAction="http://tempuri.org/IBlueData/UpdateFileModelResponse")]
        System.Threading.Tasks.Task UpdateFileModelAsync(BeamWindow.BlueBeamService.Tan tan);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBlueDataChannel : BeamWindow.BlueBeamService.IBlueData, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BlueDataClient : System.ServiceModel.ClientBase<BeamWindow.BlueBeamService.IBlueData>, BeamWindow.BlueBeamService.IBlueData {
        
        public BlueDataClient() {
        }
        
        public BlueDataClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BlueDataClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BlueDataClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BlueDataClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string ServiceTest() {
            return base.Channel.ServiceTest();
        }
        
        public System.Threading.Tasks.Task<string> ServiceTestAsync() {
            return base.Channel.ServiceTestAsync();
        }
        
        public BeamWindow.BlueBeamService.Tan GetAllFilePaths() {
            return base.Channel.GetAllFilePaths();
        }
        
        public System.Threading.Tasks.Task<BeamWindow.BlueBeamService.Tan> GetAllFilePathsAsync() {
            return base.Channel.GetAllFilePathsAsync();
        }
        
        public void UpdateFileModel(BeamWindow.BlueBeamService.Tan tan) {
            base.Channel.UpdateFileModel(tan);
        }
        
        public System.Threading.Tasks.Task UpdateFileModelAsync(BeamWindow.BlueBeamService.Tan tan) {
            return base.Channel.UpdateFileModelAsync(tan);
        }
    }
}
