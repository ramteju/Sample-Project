//------------------------------------------------------------------------------ 
// <auto-generated> 
//     This code was generated by a tool. 
//     Runtime Version:4.0.30319.239 
// 
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------ 

//  
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0 
//  
namespace SLWCFChunking.ServiceReference1
{
    using System.Runtime.Serialization;


    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "FileData", Namespace = "http://schemas.datacontract.org/2004/07/SLWCFChunking.Web")]
    public partial class FileData : object, System.ComponentModel.INotifyPropertyChanged
    {

        private byte[] BufferField;

        private string FilenameField;

        private int OffsetField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Buffer
        {
            get
            {
                return this.BufferField;
            }
            set
            {
                if ((object.ReferenceEquals(this.BufferField, value) != true))
                {
                    this.BufferField = value;
                    this.RaisePropertyChanged("Buffer");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Filename
        {
            get
            {
                return this.FilenameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.FilenameField, value) != true))
                {
                    this.FilenameField = value;
                    this.RaisePropertyChanged("Filename");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Offset
        {
            get
            {
                return this.OffsetField;
            }
            set
            {
                if ((this.OffsetField.Equals(value) != true))
                {
                    this.OffsetField = value;
                    this.RaisePropertyChanged("Offset");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "ServiceReference1.IService1")]
    public interface IService1
    {

        [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/IService1/FileUpload", ReplyAction = "http://tempuri.org/IService1/FileUploadResponse")]
        System.IAsyncResult BeginFileUpload(SLWCFChunking.ServiceReference1.FileData fileData, System.AsyncCallback callback, object asyncState);

        string EndFileUpload(System.IAsyncResult result);

        [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/IService1/FileUploadDone", ReplyAction = "http://tempuri.org/IService1/FileUploadDoneResponse")]
        System.IAsyncResult BeginFileUploadDone(string filename, System.AsyncCallback callback, object asyncState);

        bool EndFileUploadDone(System.IAsyncResult result);

        [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/IService1/DownloadFile", ReplyAction = "http://tempuri.org/IService1/DownloadFileResponse")]
        System.IAsyncResult BeginDownloadFile(System.AsyncCallback callback, object asyncState);

        byte[] EndDownloadFile(System.IAsyncResult result);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : SLWCFChunking.ServiceReference1.IService1, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        public FileUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public string Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileUploadDoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        public FileUploadDoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public bool Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        public DownloadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public byte[] Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<SLWCFChunking.ServiceReference1.IService1>, SLWCFChunking.ServiceReference1.IService1
    {

        private BeginOperationDelegate onBeginFileUploadDelegate;

        private EndOperationDelegate onEndFileUploadDelegate;

        private System.Threading.SendOrPostCallback onFileUploadCompletedDelegate;

        private BeginOperationDelegate onBeginFileUploadDoneDelegate;

        private EndOperationDelegate onEndFileUploadDoneDelegate;

        private System.Threading.SendOrPostCallback onFileUploadDoneCompletedDelegate;

        private BeginOperationDelegate onBeginDownloadFileDelegate;

        private EndOperationDelegate onEndDownloadFileDelegate;

        private System.Threading.SendOrPostCallback onDownloadFileCompletedDelegate;

        private BeginOperationDelegate onBeginOpenDelegate;

        private EndOperationDelegate onEndOpenDelegate;

        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;

        private BeginOperationDelegate onBeginCloseDelegate;

        private EndOperationDelegate onEndCloseDelegate;

        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;

        public Service1Client()
        {
        }

        public Service1Client(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public Service1Client(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        public System.Net.CookieContainer CookieContainer
        {
            get
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    return httpCookieContainerManager.CookieContainer;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else
                {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }

        public event System.EventHandler<FileUploadCompletedEventArgs> FileUploadCompleted;

        public event System.EventHandler<FileUploadDoneCompletedEventArgs> FileUploadDoneCompleted;

        public event System.EventHandler<DownloadFileCompletedEventArgs> DownloadFileCompleted;

        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;

        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLWCFChunking.ServiceReference1.IService1.BeginFileUpload(SLWCFChunking.ServiceReference1.FileData fileData, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginFileUpload(fileData, callback, asyncState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SLWCFChunking.ServiceReference1.IService1.EndFileUpload(System.IAsyncResult result)
        {
            return base.Channel.EndFileUpload(result);
        }

        private System.IAsyncResult OnBeginFileUpload(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            SLWCFChunking.ServiceReference1.FileData fileData = ((SLWCFChunking.ServiceReference1.FileData)(inValues[0]));
            return ((SLWCFChunking.ServiceReference1.IService1)(this)).BeginFileUpload(fileData, callback, asyncState);
        }

        private object[] OnEndFileUpload(System.IAsyncResult result)
        {
            string retVal = ((SLWCFChunking.ServiceReference1.IService1)(this)).EndFileUpload(result);
            return new object[] {
                    retVal};
        }

        private void OnFileUploadCompleted(object state)
        {
            if ((this.FileUploadCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FileUploadCompleted(this, new FileUploadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void FileUploadAsync(SLWCFChunking.ServiceReference1.FileData fileData)
        {
            this.FileUploadAsync(fileData, null);
        }

        public void FileUploadAsync(SLWCFChunking.ServiceReference1.FileData fileData, object userState)
        {
            if ((this.onBeginFileUploadDelegate == null))
            {
                this.onBeginFileUploadDelegate = new BeginOperationDelegate(this.OnBeginFileUpload);
            }
            if ((this.onEndFileUploadDelegate == null))
            {
                this.onEndFileUploadDelegate = new EndOperationDelegate(this.OnEndFileUpload);
            }
            if ((this.onFileUploadCompletedDelegate == null))
            {
                this.onFileUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFileUploadCompleted);
            }
            base.InvokeAsync(this.onBeginFileUploadDelegate, new object[] {
                        fileData}, this.onEndFileUploadDelegate, this.onFileUploadCompletedDelegate, userState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLWCFChunking.ServiceReference1.IService1.BeginFileUploadDone(string filename, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginFileUploadDone(filename, callback, asyncState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SLWCFChunking.ServiceReference1.IService1.EndFileUploadDone(System.IAsyncResult result)
        {
            return base.Channel.EndFileUploadDone(result);
        }

        private System.IAsyncResult OnBeginFileUploadDone(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string filename = ((string)(inValues[0]));
            return ((SLWCFChunking.ServiceReference1.IService1)(this)).BeginFileUploadDone(filename, callback, asyncState);
        }

        private object[] OnEndFileUploadDone(System.IAsyncResult result)
        {
            bool retVal = ((SLWCFChunking.ServiceReference1.IService1)(this)).EndFileUploadDone(result);
            return new object[] {
                    retVal};
        }

        private void OnFileUploadDoneCompleted(object state)
        {
            if ((this.FileUploadDoneCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FileUploadDoneCompleted(this, new FileUploadDoneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void FileUploadDoneAsync(string filename)
        {
            this.FileUploadDoneAsync(filename, null);
        }

        public void FileUploadDoneAsync(string filename, object userState)
        {
            if ((this.onBeginFileUploadDoneDelegate == null))
            {
                this.onBeginFileUploadDoneDelegate = new BeginOperationDelegate(this.OnBeginFileUploadDone);
            }
            if ((this.onEndFileUploadDoneDelegate == null))
            {
                this.onEndFileUploadDoneDelegate = new EndOperationDelegate(this.OnEndFileUploadDone);
            }
            if ((this.onFileUploadDoneCompletedDelegate == null))
            {
                this.onFileUploadDoneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFileUploadDoneCompleted);
            }
            base.InvokeAsync(this.onBeginFileUploadDoneDelegate, new object[] {
                        filename}, this.onEndFileUploadDoneDelegate, this.onFileUploadDoneCompletedDelegate, userState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLWCFChunking.ServiceReference1.IService1.BeginDownloadFile(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginDownloadFile(callback, asyncState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] SLWCFChunking.ServiceReference1.IService1.EndDownloadFile(System.IAsyncResult result)
        {
            return base.Channel.EndDownloadFile(result);
        }

        private System.IAsyncResult OnBeginDownloadFile(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((SLWCFChunking.ServiceReference1.IService1)(this)).BeginDownloadFile(callback, asyncState);
        }

        private object[] OnEndDownloadFile(System.IAsyncResult result)
        {
            byte[] retVal = ((SLWCFChunking.ServiceReference1.IService1)(this)).EndDownloadFile(result);
            return new object[] {
                    retVal};
        }

        private void OnDownloadFileCompleted(object state)
        {
            if ((this.DownloadFileCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadFileCompleted(this, new DownloadFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void DownloadFileAsync()
        {
            this.DownloadFileAsync(null);
        }

        public void DownloadFileAsync(object userState)
        {
            if ((this.onBeginDownloadFileDelegate == null))
            {
                this.onBeginDownloadFileDelegate = new BeginOperationDelegate(this.OnBeginDownloadFile);
            }
            if ((this.onEndDownloadFileDelegate == null))
            {
                this.onEndDownloadFileDelegate = new EndOperationDelegate(this.OnEndDownloadFile);
            }
            if ((this.onDownloadFileCompletedDelegate == null))
            {
                this.onDownloadFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadFileCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadFileDelegate, null, this.onEndDownloadFileDelegate, this.onDownloadFileCompletedDelegate, userState);
        }

        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }

        private object[] OnEndOpen(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }

        private void OnOpenCompleted(object state)
        {
            if ((this.OpenCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void OpenAsync()
        {
            this.OpenAsync(null);
        }

        public void OpenAsync(object userState)
        {
            if ((this.onBeginOpenDelegate == null))
            {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null))
            {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null))
            {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }

        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }

        private object[] OnEndClose(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }

        private void OnCloseCompleted(object state)
        {
            if ((this.CloseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void CloseAsync()
        {
            this.CloseAsync(null);
        }

        public void CloseAsync(object userState)
        {
            if ((this.onBeginCloseDelegate == null))
            {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null))
            {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null))
            {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }

        protected override SLWCFChunking.ServiceReference1.IService1 CreateChannel()
        {
            return new Service1ClientChannel(this);
        }

        private class Service1ClientChannel : ChannelBase<SLWCFChunking.ServiceReference1.IService1>, SLWCFChunking.ServiceReference1.IService1
        {

            public Service1ClientChannel(System.ServiceModel.ClientBase<SLWCFChunking.ServiceReference1.IService1> client) :
                base(client)
            {
            }

            public System.IAsyncResult BeginFileUpload(SLWCFChunking.ServiceReference1.FileData fileData, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = fileData;
                System.IAsyncResult _result = base.BeginInvoke("FileUpload", _args, callback, asyncState);
                return _result;
            }

            public string EndFileUpload(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("FileUpload", _args, result)));
                return _result;
            }

            public System.IAsyncResult BeginFileUploadDone(string filename, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = filename;
                System.IAsyncResult _result = base.BeginInvoke("FileUploadDone", _args, callback, asyncState);
                return _result;
            }

            public bool EndFileUploadDone(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("FileUploadDone", _args, result)));
                return _result;
            }

            public System.IAsyncResult BeginDownloadFile(System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DownloadFile", _args, callback, asyncState);
                return _result;
            }

            public byte[] EndDownloadFile(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("DownloadFile", _args, result)));
                return _result;
            }
        }
    }
}
