//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.S3Connection {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileData", Namespace="http://schemas.datacontract.org/2004/07/ProductTracking.Services")]
    [System.SerializableAttribute()]
    public partial class FileData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] BufferField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OffsetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int actionIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Buffer {
            get {
                return this.BufferField;
            }
            set {
                if ((object.ReferenceEquals(this.BufferField, value) != true)) {
                    this.BufferField = value;
                    this.RaisePropertyChanged("Buffer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Offset {
            get {
                return this.OffsetField;
            }
            set {
                if ((this.OffsetField.Equals(value) != true)) {
                    this.OffsetField = value;
                    this.RaisePropertyChanged("Offset");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int actionID {
            get {
                return this.actionIDField;
            }
            set {
                if ((this.actionIDField.Equals(value) != true)) {
                    this.actionIDField = value;
                    this.RaisePropertyChanged("actionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="S3Connection.IS3Connection")]
    public interface IS3Connection {

        //[System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IS3Connection/FileUpload", ReplyAction="http://tempuri.org/IS3Connection/FileUploadResponse")]
        //string FileUpload(Client.S3Connection.FileData fileData);

        //[System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IS3Connection/FileUpload", ReplyAction="http://tempuri.org/IS3Connection/FileUploadResponse")]
        //System.Threading.Tasks.Task<string> FileUploadAsync(Client.S3Connection.FileData fileData);

        //[System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IS3Connection/FileUploadDone", ReplyAction="http://tempuri.org/IS3Connection/FileUploadDoneResponse")]
        //bool FileUploadDone(int actionId);

        //[System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IS3Connection/FileUploadDone", ReplyAction="http://tempuri.org/IS3Connection/FileUploadDoneResponse")]
        //System.Threading.Tasks.Task<bool> FileUploadDoneAsync(int actionId);

        //[System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IS3Connection/DownloadFile", ReplyAction="http://tempuri.org/IS3Connection/DownloadFileResponse")]
        //System.IO.Stream DownloadFile();

        //[System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IS3Connection/DownloadFile", ReplyAction="http://tempuri.org/IS3Connection/DownloadFileResponse")]
        //System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync();

        //[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IS3Connection/GetS3Object", ReplyAction = "http://tempuri.org/IS3Connection/GetS3ObjectResponse")]
        //System.Collections.Generic.Dictionary<long, byte[]> GetS3Object(int id, long Offset, int BufferSize);

        //[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IS3Connection/GetS3Object", ReplyAction = "http://tempuri.org/IS3Connection/GetS3ObjectResponse")]
        //System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<long, byte[]>> GetS3ObjectAsync(int id, long Offset, int BufferSize);


        [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/IS3Connection/FileUpload", ReplyAction = "http://tempuri.org/IS3Connection/FileUploadResponse")]
        System.IAsyncResult BeginFileUpload(Client.S3Connection.FileData fileData, System.AsyncCallback callback, object asyncState);

        string EndFileUpload(System.IAsyncResult result);

        [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/IS3Connection/FileUploadDone", ReplyAction = "http://tempuri.org/IS3Connection/FileUploadDoneResponse")]
        System.IAsyncResult BeginFileUploadDone(int filename, System.AsyncCallback callback, object asyncState);

        bool EndFileUploadDone(System.IAsyncResult result);

        [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/IS3Connection/DownloadFile", ReplyAction = "http://tempuri.org/IS3Connection/DownloadFileResponse")]
        System.IAsyncResult BeginDownloadFile(System.AsyncCallback callback, object asyncState);

        byte[] EndDownloadFile(System.IAsyncResult result);
		
		[System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/IS3Connection/GetS3Object", ReplyAction = "http://tempuri.org/IS3Connection/GetS3ObjectResponse")]
        System.IAsyncResult BeginGetS3Object(int id, long Offset, int BufferSize,System.AsyncCallback callback, object asyncState);

        System.Collections.Generic.Dictionary<long, byte[]> EndGetS3Object(System.IAsyncResult result);
		
		[System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/IS3Connection/GetS3ObjectDone", ReplyAction = "http://tempuri.org/IS3Connection/GetS3ObjectDoneResponse")]
        System.IAsyncResult BeginGetS3ObjectDone(int filename, System.AsyncCallback callback, object asyncState);

        bool EndGetS3ObjectDone(System.IAsyncResult result);

        


    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IS3ConnectionChannel : Client.S3Connection.IS3Connection, System.ServiceModel.IClientChannel {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        public FileUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public string Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetS3ObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        public GetS3ObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public System.Collections.Generic.Dictionary<long, byte[]> Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<long, byte[]>)(this.results[0]));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileUploadDoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        public FileUploadDoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public bool Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
	
	[System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetS3ObjectDoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        public GetS3ObjectDoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public bool Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        public DownloadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public byte[] Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class S3ConnectionClient : System.ServiceModel.ClientBase<Client.S3Connection.IS3Connection>, Client.S3Connection.IS3Connection {

        private BeginOperationDelegate onBeginFileUploadDelegate;

        private EndOperationDelegate onEndFileUploadDelegate;

        private System.Threading.SendOrPostCallback onFileUploadCompletedDelegate;

        private BeginOperationDelegate onBeginFileUploadDoneDelegate;

        private EndOperationDelegate onEndFileUploadDoneDelegate;

        private System.Threading.SendOrPostCallback onFileUploadDoneCompletedDelegate;

        private BeginOperationDelegate onBeginDownloadFileDelegate;

        private EndOperationDelegate onEndDownloadFileDelegate;

        private System.Threading.SendOrPostCallback onDownloadFileCompletedDelegate;
		
		private BeginOperationDelegate onBeginGetS3ObjectDelegate;

        private EndOperationDelegate onEndGetS3ObjectDelegate;

        private System.Threading.SendOrPostCallback onGetS3ObjectCompletedDelegate;
		
		private BeginOperationDelegate onBeginGetS3ObjectDoneDelegate;

        private EndOperationDelegate onEndGetS3ObjectDoneDelegate;

        private System.Threading.SendOrPostCallback onGetS3ObjectDoneCompletedDelegate;

        private BeginOperationDelegate onBeginOpenDelegate;

        private EndOperationDelegate onEndOpenDelegate;

        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;

        private BeginOperationDelegate onBeginCloseDelegate;

        private EndOperationDelegate onEndCloseDelegate;

        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;

        public S3ConnectionClient() {
        }
        
        public S3ConnectionClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public S3ConnectionClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public S3ConnectionClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public S3ConnectionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }

        //public string FileUpload(Client.S3Connection.FileData fileData) {
        //    return base.Channel.FileUpload(fileData);
        //}

        //public System.Threading.Tasks.Task<string> FileUploadAsync(Client.S3Connection.FileData fileData) {
        //    return base.Channel.FileUploadAsync(fileData);
        //}

        //public bool FileUploadDone(int actionId) {
        //    return base.Channel.FileUploadDone(actionId);
        //}

        //public System.Threading.Tasks.Task<bool> FileUploadDoneAsync(int actionId) {
        //    return base.Channel.FileUploadDoneAsync(actionId);
        //}

        //public System.IO.Stream DownloadFile() {
        //    return base.Channel.DownloadFile();
        //}

        //public System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync() {
        //    return base.Channel.DownloadFileAsync();
        //}

        //public System.Collections.Generic.Dictionary<long, byte[]> GetS3Object(int id, long Offset, int BufferSize)
        //{
        //    return base.Channel.GetS3Object(id, Offset, BufferSize);
        //}
        //
        //public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<long, byte[]>> GetS3ObjectAsync(int id, long Offset, int BufferSize)
        //{
        //    return base.Channel.GetS3ObjectAsync(id, Offset, BufferSize);
        //}

        public System.Net.CookieContainer CookieContainer
        {
            get
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    return httpCookieContainerManager.CookieContainer;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else
                {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }


        public event System.EventHandler<FileUploadCompletedEventArgs> FileUploadCompleted;

        public event System.EventHandler<FileUploadDoneCompletedEventArgs> FileUploadDoneCompleted;

        public event System.EventHandler<DownloadFileCompletedEventArgs> DownloadFileCompleted;
		
        public event System.EventHandler<GetS3ObjectCompletedEventArgs> GetS3ObjectCompleted;

		public event System.EventHandler<GetS3ObjectDoneCompletedEventArgs> GetS3ObjectDoneCompleted;
		
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;

        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;


        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Client.S3Connection.IS3Connection.BeginFileUpload(Client.S3Connection.FileData fileData, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginFileUpload(fileData, callback, asyncState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Client.S3Connection.IS3Connection.EndFileUpload(System.IAsyncResult result)
        {
            return base.Channel.EndFileUpload(result);
        }

        private System.IAsyncResult OnBeginFileUpload(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            Client.S3Connection.FileData fileData = ((Client.S3Connection.FileData)(inValues[0]));
            return ((Client.S3Connection.IS3Connection)(this)).BeginFileUpload(fileData, callback, asyncState);
        }

        private object[] OnEndFileUpload(System.IAsyncResult result)
        {
            string retVal = ((Client.S3Connection.IS3Connection)(this)).EndFileUpload(result);
            return new object[] {
                    retVal};
        }

        private void OnFileUploadCompleted(object state)
        {
            if ((this.FileUploadCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FileUploadCompleted(this, new FileUploadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void FileUploadAsync(Client.S3Connection.FileData fileData)
        {
            this.FileUploadAsync(fileData, null);
        }

        public void FileUploadAsync(Client.S3Connection.FileData fileData, object userState)
        {
            if ((this.onBeginFileUploadDelegate == null))
            {
                this.onBeginFileUploadDelegate = new BeginOperationDelegate(this.OnBeginFileUpload);
            }
            if ((this.onEndFileUploadDelegate == null))
            {
                this.onEndFileUploadDelegate = new EndOperationDelegate(this.OnEndFileUpload);
            }
            if ((this.onFileUploadCompletedDelegate == null))
            {
                this.onFileUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFileUploadCompleted);
            }
            base.InvokeAsync(this.onBeginFileUploadDelegate, new object[] {
                        fileData}, this.onEndFileUploadDelegate, this.onFileUploadCompletedDelegate, userState);
        }
		
		
		[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Client.S3Connection.IS3Connection.BeginGetS3Object(int id, long Offset, int BufferSize, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetS3Object(id, Offset, BufferSize, callback, asyncState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<long, byte[]> Client.S3Connection.IS3Connection.EndGetS3Object(System.IAsyncResult result)
        {
            return base.Channel.EndGetS3Object(result);
        }

        private System.IAsyncResult OnBeginGetS3Object(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            int id = ((int)(inValues[0]));
			long Offset = ((long)(inValues[1]));
			int BufferSize = ((int)(inValues[2]));
            return ((Client.S3Connection.IS3Connection)(this)).BeginGetS3Object(id,Offset,BufferSize, callback, asyncState);
        }

        private object[] OnEndGetS3Object(System.IAsyncResult result)
        {
            System.Collections.Generic.Dictionary<long, byte[]> retVal = ((Client.S3Connection.IS3Connection)(this)).EndGetS3Object(result);
            return new object[] {
                    retVal};
        }

        private void OnGetS3ObjectCompleted(object state)
        {
            if ((this.GetS3ObjectCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetS3ObjectCompleted(this, new GetS3ObjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void GetS3ObjectAsync(int id, long Offset, int BufferSize)
        {
            this.GetS3ObjectAsync(id,Offset,BufferSize, null);
        }

        public void GetS3ObjectAsync(int id, long Offset, int BufferSize, object userState)
        {
            if ((this.onBeginGetS3ObjectDelegate == null))
            {
                this.onBeginGetS3ObjectDelegate = new BeginOperationDelegate(this.OnBeginGetS3Object);
            }
            if ((this.onEndGetS3ObjectDelegate == null))
            {
                this.onEndGetS3ObjectDelegate = new EndOperationDelegate(this.OnEndGetS3Object);
            }
            if ((this.onGetS3ObjectCompletedDelegate == null))
            {
                this.onGetS3ObjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetS3ObjectCompleted);
            }
            base.InvokeAsync(this.onBeginGetS3ObjectDelegate, new object[] {
                        id,Offset,BufferSize}, this.onEndGetS3ObjectDelegate, this.onGetS3ObjectCompletedDelegate, userState);
        }
		

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Client.S3Connection.IS3Connection.BeginFileUploadDone(int filename, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginFileUploadDone(filename, callback, asyncState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Client.S3Connection.IS3Connection.EndFileUploadDone(System.IAsyncResult result)
        {
            return base.Channel.EndFileUploadDone(result);
        }

        private System.IAsyncResult OnBeginFileUploadDone(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            int filename = ((int)(inValues[0]));
            return ((Client.S3Connection.IS3Connection)(this)).BeginFileUploadDone(filename, callback, asyncState);
        }

        private object[] OnEndFileUploadDone(System.IAsyncResult result)
        {
            bool retVal = ((Client.S3Connection.IS3Connection)(this)).EndFileUploadDone(result);
            return new object[] {
                    retVal};
        }

        private void OnFileUploadDoneCompleted(object state)
        {
            if ((this.FileUploadDoneCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FileUploadDoneCompleted(this, new FileUploadDoneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void FileUploadDoneAsync(int filename)
        {
            this.FileUploadDoneAsync(filename, null);
        }

        public void FileUploadDoneAsync(int filename, object userState)
        {
            if ((this.onBeginFileUploadDoneDelegate == null))
            {
                this.onBeginFileUploadDoneDelegate = new BeginOperationDelegate(this.OnBeginFileUploadDone);
            }
            if ((this.onEndFileUploadDoneDelegate == null))
            {
                this.onEndFileUploadDoneDelegate = new EndOperationDelegate(this.OnEndFileUploadDone);
            }
            if ((this.onFileUploadDoneCompletedDelegate == null))
            {
                this.onFileUploadDoneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFileUploadDoneCompleted);
            }
            base.InvokeAsync(this.onBeginFileUploadDoneDelegate, new object[] {
                        filename}, this.onEndFileUploadDoneDelegate, this.onFileUploadDoneCompletedDelegate, userState);
        }
		
		
		[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Client.S3Connection.IS3Connection.BeginGetS3ObjectDone(int filename, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetS3ObjectDone(filename, callback, asyncState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Client.S3Connection.IS3Connection.EndGetS3ObjectDone(System.IAsyncResult result)
        {
            return base.Channel.EndGetS3ObjectDone(result);
        }

        private System.IAsyncResult OnBeginGetS3ObjectDone(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            int filename = ((int)(inValues[0]));
            return ((Client.S3Connection.IS3Connection)(this)).BeginGetS3ObjectDone(filename, callback, asyncState);
        }

        private object[] OnEndGetS3ObjectDone(System.IAsyncResult result)
        {
            bool retVal = ((Client.S3Connection.IS3Connection)(this)).EndGetS3ObjectDone(result);
            return new object[] {
                    retVal};
        }

        private void OnGetS3ObjectDoneCompleted(object state)
        {
            if ((this.GetS3ObjectDoneCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetS3ObjectDoneCompleted(this, new GetS3ObjectDoneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void GetS3ObjectDoneAsync(int filename)
        {
            this.GetS3ObjectDoneAsync(filename, null);
        }

        public void GetS3ObjectDoneAsync(int filename, object userState)
        {
            if ((this.onBeginGetS3ObjectDoneDelegate == null))
            {
                this.onBeginGetS3ObjectDoneDelegate = new BeginOperationDelegate(this.OnBeginGetS3ObjectDone);
            }
            if ((this.onEndGetS3ObjectDoneDelegate == null))
            {
                this.onEndGetS3ObjectDoneDelegate = new EndOperationDelegate(this.OnEndGetS3ObjectDone);
            }
            if ((this.onGetS3ObjectDoneCompletedDelegate == null))
            {
                this.onGetS3ObjectDoneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetS3ObjectDoneCompleted);
            }
            base.InvokeAsync(this.onBeginGetS3ObjectDoneDelegate, new object[] {
                        filename}, this.onEndGetS3ObjectDoneDelegate, this.onGetS3ObjectDoneCompletedDelegate, userState);
        }
		

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Client.S3Connection.IS3Connection.BeginDownloadFile(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginDownloadFile(callback, asyncState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] Client.S3Connection.IS3Connection.EndDownloadFile(System.IAsyncResult result)
        {
            return base.Channel.EndDownloadFile(result);
        }

        private System.IAsyncResult OnBeginDownloadFile(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((Client.S3Connection.IS3Connection)(this)).BeginDownloadFile(callback, asyncState);
        }

        private object[] OnEndDownloadFile(System.IAsyncResult result)
        {
            byte[] retVal = ((Client.S3Connection.IS3Connection)(this)).EndDownloadFile(result);
            return new object[] {
                    retVal};
        }

        private void OnDownloadFileCompleted(object state)
        {
            if ((this.DownloadFileCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadFileCompleted(this, new DownloadFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void DownloadFileAsync()
        {
            this.DownloadFileAsync(null);
        }

        public void DownloadFileAsync(object userState)
        {
            if ((this.onBeginDownloadFileDelegate == null))
            {
                this.onBeginDownloadFileDelegate = new BeginOperationDelegate(this.OnBeginDownloadFile);
            }
            if ((this.onEndDownloadFileDelegate == null))
            {
                this.onEndDownloadFileDelegate = new EndOperationDelegate(this.OnEndDownloadFile);
            }
            if ((this.onDownloadFileCompletedDelegate == null))
            {
                this.onDownloadFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadFileCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadFileDelegate, null, this.onEndDownloadFileDelegate, this.onDownloadFileCompletedDelegate, userState);
        }

        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }

        private object[] OnEndOpen(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }

        private void OnOpenCompleted(object state)
        {
            if ((this.OpenCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void OpenAsync()
        {
            this.OpenAsync(null);
        }

        public void OpenAsync(object userState)
        {
            if ((this.onBeginOpenDelegate == null))
            {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null))
            {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null))
            {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }

        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }

        private object[] OnEndClose(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }

        private void OnCloseCompleted(object state)
        {
            if ((this.CloseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void CloseAsync()
        {
            this.CloseAsync(null);
        }

        public void CloseAsync(object userState)
        {
            if ((this.onBeginCloseDelegate == null))
            {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null))
            {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null))
            {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }

        protected override Client.S3Connection.IS3Connection CreateChannel()
        {
            return new Service1ClientChannel(this);
        }

        private class Service1ClientChannel : ChannelBase<Client.S3Connection.IS3Connection>, Client.S3Connection.IS3Connection
        {

            public Service1ClientChannel(System.ServiceModel.ClientBase<Client.S3Connection.IS3Connection> client) :
                base(client)
            {
            }

            public System.IAsyncResult BeginFileUpload(Client.S3Connection.FileData fileData, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = fileData;
                System.IAsyncResult _result = base.BeginInvoke("FileUpload", _args, callback, asyncState);
                return _result;
            }

            public string EndFileUpload(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("FileUpload", _args, result)));
                return _result;
            }

            public System.IAsyncResult BeginFileUploadDone(int filename, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = filename;
                System.IAsyncResult _result = base.BeginInvoke("FileUploadDone", _args, callback, asyncState);
                return _result;
            }

            public bool EndFileUploadDone(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("FileUploadDone", _args, result)));
                return _result;
            }

            public System.IAsyncResult BeginDownloadFile(System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DownloadFile", _args, callback, asyncState);
                return _result;
            }

            public byte[] EndDownloadFile(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("DownloadFile", _args, result)));
                return _result;
            }
			
			public System.IAsyncResult BeginGetS3Object(int id, long Offset, int BufferSize,System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[3];
                _args[0] = id;
                _args[1] = Offset;
                _args[2] = BufferSize;
                System.IAsyncResult _result = base.BeginInvoke("GetS3Object", _args, callback, asyncState);
                return _result;
            }

            public System.Collections.Generic.Dictionary<long, byte[]> EndGetS3Object(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<long, byte[]> _result = ((System.Collections.Generic.Dictionary<long, byte[]>)(base.EndInvoke("GetS3Object", _args, result)));
                return _result;
            }
			
			public System.IAsyncResult BeginGetS3ObjectDone(int filename, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = filename;
                System.IAsyncResult _result = base.BeginInvoke("GetS3ObjectDone", _args, callback, asyncState);
                return _result;
            }

            public bool EndGetS3ObjectDone(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("GetS3ObjectDone", _args, result)));
                return _result;
            }

        }
    }
}
